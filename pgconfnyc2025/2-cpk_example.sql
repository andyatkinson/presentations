-- Expects create_tables.sql was run earlier
---
-- Change from Single column PK to CPK
-- Drop single column PK
ALTER TABLE orders DROP CONSTRAINT orders_pkey;

-- Create CPK
ALTER TABLE orders
ADD CONSTRAINT orders_cpk
PRIMARY KEY (supplier_id, id);

-- Convert "customers" from single PK to CPK
ALTER TABLE customers DROP CONSTRAINT customers_pkey CASCADE;
ALTER TABLE customers
ADD CONSTRAINT customers_cpk
PRIMARY KEY (supplier_id, id);

-- Alternative: Create orders_with_cpk
-- We've linked this to the CPK for customers
DROP TABLE IF EXISTS orders_with_cpk;
CREATE TABLE orders_with_cpk (
  id BIGINT GENERATED ALWAYS AS IDENTITY NOT NULL,
  supplier_id BIGINT NOT NULL,
  customer_id BIGINT NOT NULL,
  quantity INTEGER NOT NULL,
  CONSTRAINT orders_pkey_cpk
    PRIMARY KEY (supplier_id, id),
  CONSTRAINT fk_customer
      FOREIGN KEY (supplier_id, id)
      REFERENCES customers (supplier_id, id)
);


--
-- Bonus section: Shared SEQUENCES vs. tenant-scoped sequences
-- Unlocked because of CPKs
--

-- Normally we'd share a single sequence across all tenants
-- What if we wanted unique sequences per tenant?
--
-- Create Sequences
CREATE SEQUENCE IF NOT EXISTS supplier_1_seq;
CREATE SEQUENCE IF NOT EXISTS supplier_2_seq;
CREATE SEQUENCE IF NOT EXISTS supplier_3_seq;

-- Let's reset everything
truncate orders_with_seq; -- if exists
ALTER SEQUENCE supplier_1_seq RESTART WITH 1;
ALTER SEQUENCE supplier_2_seq RESTART WITH 1;
ALTER SEQUENCE supplier_3_seq RESTART WITH 1;

-- Change the identity definition
-- Instead of GENERATED ALWAYS we'll use GENERATED BY DEFAULT

-- Using CPKs, we are staring from #1 for each supplier
DROP TABLE IF EXISTS orders_with_seq;
CREATE TABLE IF NOT EXISTS orders_with_seq (
  -- id BIGINT GENERATED ALWAYS AS IDENTITY NOT NULL,
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  supplier_id BIGINT NOT NULL,
  customer_id BIGINT NOT NULL,
  quantity INTEGER NOT NULL,
  CONSTRAINT orders_with_seq_pkey_cpk
  PRIMARY KEY (supplier_id, id) -- CPK
);


-- Could manually specify sequence to use for inserts
-- assuming sequences were created in advance, and matched
-- to suppliers
INSERT INTO orders_with_seq (id, supplier_id, customer_id, quantity)
VALUES (nextval('supplier_1_seq'), 1, 1, 1);

INSERT INTO orders_with_seq (id, supplier_id, customer_id, quantity)
VALUES (nextval('supplier_2_seq'), 2, 1, 1);

INSERT INTO orders_with_seq (id, supplier_id, customer_id, quantity)
VALUES (nextval('supplier_3_seq'), 3, 1, 1);



select * from orders_with_seq;

-- More for supplier_1
INSERT INTO orders_with_seq (id, supplier_id, customer_id, quantity)
VALUES (nextval('supplier_1_seq'), 1, 1, 1);
INSERT INTO orders_with_seq (id, supplier_id, customer_id, quantity)
VALUES (nextval('supplier_1_seq'), 1, 1, 1);

select * from orders_with_seq;

-- More for supplier_2
INSERT INTO orders_with_seq (id, supplier_id, customer_id, quantity)
VALUES (nextval('supplier_2_seq'), 2, 1, 1);
INSERT INTO orders_with_seq (id, supplier_id, customer_id, quantity)
VALUES (nextval('supplier_2_seq'), 2, 1, 1);

select * from orders_with_seq;
